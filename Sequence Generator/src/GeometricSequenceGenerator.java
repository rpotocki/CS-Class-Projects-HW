import java.util.Iterator;
//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title:           GeometricSequenceGenerator.java
// Files:           
// Course:          CS300 Fall 2018
//
// Author:          Ryan Potocki
// Email:           r.potocki@wisc.edu
// Lecturer's Name: Gary Dahl
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
// Students who get help from sources other than their partner must fully 
// acknowledge and credit those sources of help here.  Instructors and TAs do 
// not need to be credited here, but tutors, friends, relatives, room mates, 
// strangers, and others do.  If you received no outside help from either type
//  of source, then please explicitly indicate NONE.
//
// Persons:         (identify each person and describe their help in detail)
// Online Sources:  (identify each URL and describe their assistance in detail)
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////
 
 
/**
 * This class represents a generator for an geometric progression
 * This class implements the Iterator<Integer> interface
 *
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence
 
  private int generatedCount; // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() method
 
  // constructor
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    // check for the precondition: size > 0, throws an IllegalArgumentException if this precondition
    // is not satisfied
    if (size <= 0) 
      throw new IllegalArgumentException("WARNING: "
          + "CANNOT create a sequence with size <= zero.");
    // check for the validity of init (>=0) and diff (>0), throw an IllegalArgumentException
    // if these two parameters are not valid 
    if(init < 0 || ratio <=0 )
      throw new IllegalArgumentException("WARNING: "
          + "The starting element and the common ratio for a geometric progression should be STRICTLY POSITIVE.");
    // set the instance fields
    this.SIZE = size;
    this.INIT = init;
    this.RATIO = ratio;
    next = init; // initializes next to the first element in this arithmetic progression
    generatedCount = 0;
  }
 
  /** 
   * Checks if the iteration has a next element in this sequence
   * @return true if the current element in the iteration has a next element in this sequence,
   * false otherwise 
   */
  @Override
  public boolean hasNext() {
 // Time Complexity: O(1)
    return generatedCount < SIZE;
  }
 
  
  /** 
   * Returns the next element in this geometric sequence iteration with respect to the numbers
   * generated so far
   * @return the next element in this iteration
   */
  @Override
  public Integer next() {
    // Time Complexity: O(N)
    if (!hasNext()) // check if the current element has a next element in this sequence
      return null;
    int current = next; // set the current element to next
    generatedCount++; // increment the number of generated elements so far
    next *= RATIO; // set the next element (adds the common difference to the current number) 
    return current; // return the current number as the generated one
  }
 
  // You can add local variable to your hasNext() or next() method to implement their correct behavior if needed
  // You can add public getters and setters methods as needed to implement your test methods here
  // You CANNOT define mutators for any final field
 
 
}
